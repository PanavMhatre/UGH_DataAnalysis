# -*- coding: utf-8 -*-
"""UGH Data Analysis Notebook - Tech Titans

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cRlck9bHcLWpHJNXcyrPETZr4Z5KfCSK

##Air Quality
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('air_quality_Nov2017.csv')
df['Generated Date Time'] = pd.to_datetime(df['Generated'])
df['Year'] = df['Generated Date Time'].dt.year
air_quality_mapping = {"Good": 1, "Moderate": 2}
df['Air Quality'] = df['Air Quality'].map(air_quality_mapping)
average_air_quality = df.groupby('Year')['Air Quality'].mean().reset_index()
print(average_air_quality)

"""##Bus Stops"""

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('bus_stops.csv')

# Create a new column 'Day Bus Stops' with 0 as the initial value
df['Day Bus Stops'] = 0

# Create a new column 'Night Bus Stops' with 0 as the initial value
df['Night Bus Stops'] = 0

# Update the 'Day Bus Stops' column based on the 'Transport' column
df.loc[df['Transport'] == 'Day bus stop', 'Day Bus Stops'] = 1

# Update the 'Night Bus Stops' column based on the 'Transport' column
df.loc[df['Transport'] == 'Night bus stop', 'Night Bus Stops'] = 1

# Group by 'District.Name' and sum the 'Day Bus Stops' and 'Night Bus Stops'
result = df.groupby('District.Name')[['Day Bus Stops', 'Night Bus Stops']].sum().reset_index()

# Print the resulting DataFrame
print(result)

import pandas as pd
import matplotlib.pyplot as plt

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('bus_stops.csv')

# Create a new column 'Day Bus Stops' with 0 as the initial value
df['Day Bus Stops'] = 0

# Create a new column 'Night Bus Stops' with 0 as the initial value
df['Night Bus Stops'] = 0

# Update the 'Day Bus Stops' column based on the 'Transport' column
df.loc[df['Transport'] == 'Day bus stop', 'Day Bus Stops'] = 1

# Update the 'Night Bus Stops' column based on the 'Transport' column
df.loc[df['Transport'] == 'Night bus stop', 'Night Bus Stops'] = 1

# Group by 'District.Name' and sum the 'Day Bus Stops' and 'Night Bus Stops'
result = df.groupby('District.Name')[['Day Bus Stops', 'Night Bus Stops']].sum().reset_index()

# Plot the data
plt.figure(figsize=(12, 6))
plt.bar(result['District.Name'], result['Day Bus Stops'], label='Day Bus Stops')
plt.bar(result['District.Name'], result['Night Bus Stops'], label='Night Bus Stops', bottom=result['Day Bus Stops'])
plt.xlabel('District Name')
plt.ylabel('Number of Bus Stops')
plt.title('Number of Day and Night Bus Stops per District')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.tight_layout()
plt.show()

"""##Immigrants by Nationality"""

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a Pandas DataFrame
df = pd.read_csv('immigrants_by_nationality.csv')

# Exclude the rows where Nationality is 'Spain'
df_filtered = df[df['Nationality'] != 'Spain']

# Group the data by nationality and sum the number of immigrants over the years
nationality_counts = df_filtered.groupby('Nationality')['Number'].sum()

# Sort the nationalities by the total number of immigrants in descending order
top_nationalities = nationality_counts.sort_values(ascending=False).head(20)

# Create a bar plot
plt.figure(figsize=(12, 6))
top_nationalities.plot(kind='bar')
plt.xlabel('Nationality')
plt.ylabel('Total Number of Immigrants')
plt.title('Top 20 Immigrant Nationalities (Excluding Spain) Over the Years')
plt.xticks(rotation=90)
plt.show()

df = pd.read_csv('immigrants_by_nationality.csv')

# Group the data by 'Year', 'District Name', and 'Nationality', and sum the 'Number' column
result = df.groupby(['Year', 'District Name', 'Nationality'])['Number'].sum().reset_index()
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
# Print the resulting DataFrame
print(result['Nationality'].unique())

import pandas as pd
import matplotlib.pyplot as plt

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('immigrants_by_nationality.csv')

# Create a dictionary to map each nationality to its region
nationality_to_continent = {
    'Afghanistan': 'Asia',
    'Albania': 'Europe',
    'Algeria': 'Africa',
    'Andorra': 'Europe',
    'Angola': 'Africa',
    'Argentina': 'South America',
    'Armenia': 'Asia',
    'Australia': 'Australia',
    'Austria': 'Europe',
    'Azerbaijan': 'Asia',
    'Bahrain': 'Asia',
    'Bangladesh': 'Asia',
    'Barbados': 'North America',
    'Belarus': 'Europe',
    'Belgium': 'Europe',
    'Benin': 'Africa',
    'Bolivia': 'South America',
    'Bosnia and Herzegovina': 'Europe',
    'Brasil': 'South America',
    'Bulgaria': 'Europe',
    'Burkina Faso': 'Africa',
    'Burundi': 'Africa',
    'Cambodja': 'Asia',
    'Camerun': 'Africa',
    'Canada': 'North America',
    'Cape Verde': 'Africa',
    'Central African Republic': 'Africa',
    'Chile': 'South America',
    'China': 'Asia',
    'Colombia': 'South America',
    'Congo': 'Africa',
    'Costa Rica': 'North America',
    'Croatia': 'Europe',
    'Cuba': 'North America',
    'Cyprus': 'Asia',
    'Czech Republic': 'Europe',
    'Denmark': 'Europe',
    'Djibouti': 'Africa',
    'Dominica': 'North America',
    'Dominican Republic': 'North America',
    'Ecuador': 'South America',
    'Egypt': 'Africa',
    'El Salvador': 'North America',
    'Equatorial Guinea': 'Africa',
    'Estonia': 'Europe',
    'Ethiopia': 'Africa',
    'Finland': 'Europe',
    'France': 'Europe',
    'Gabon': 'Africa',
    'Gambia': 'Africa',
    'Georgia': 'Asia',
    'Germany': 'Europe',
    'Ghana': 'Africa',
    'Greece': 'Europe',
    'Grenada': 'North America',
    'Guatemala': 'North America',
    'Guinea': 'Africa',
    'Guinea-Bissau': 'Africa',
    'Haiti': 'North America',
    'Honduras': 'North America',
    'Hungary': 'Europe',
    'Iceland': 'Europe',
    'India': 'Asia',
    'Indonesia': 'Asia',
    'Iran': 'Asia',
    'Iraq': 'Asia',
    'Ireland': 'Europe',
    'Israel': 'Asia',
    'Italy': 'Europe',
    'Ivory Coast': 'Africa',
    'Jamaica': 'North America',
    'Japan': 'Asia',
    'Jordan': 'Asia',
    'Kazakhstan': 'Asia',
    'Kenya': 'Africa',
    'Kuwait': 'Asia',
    'Kyrgyzstan': 'Asia',
    'Latvia': 'Europe',
    'Lebanon': 'Asia',
    'Libya': 'Africa',
    'Lithuania': 'Europe',
    'Luxembourg': 'Europe',
    'Macedonia': 'Europe',
    'Madagascar': 'Africa',
    'Malaysia': 'Asia',
    'Maldives': 'Asia',
    'Mali': 'Africa',
    'Malta': 'Europe',
    'Mauritania': 'Africa',
    'Mauritius': 'Africa',
    'Mexico': 'North America',
    'Moldova': 'Europe',
    'Mongolia': 'Asia',
    'Montenegro': 'Europe',
    'Morocco': 'Africa',
    'Mozambique': 'Africa',
    'Namibia': 'Africa',
    'Nepal': 'Asia',
    'Netherlands': 'Europe',
    'New Zealand': 'Australia',
    'Nicaragua': 'North America',
    'Nigeria': 'Africa',
    'No information': 'Unknown',
    'Norway': 'Europe',
    'Oman': 'Asia',
    'Pakistan': 'Asia',
    'Palestinian territories': 'Asia',
    'Panama': 'North America',
    'Paraguay': 'South America',
    'Peru': 'South America',
    'Philippines': 'Asia',
    'Poland': 'Europe',
    'Portugal': 'Europe',
    'Qatar': 'Asia',
    'Romania': 'Europe',
    'Russia': 'Europe/Asia',
    'Rwanda': 'Africa',
    'Saint Kitts and Nevis': 'North America',
    'Saudi Arabia': 'Asia',
    'Senegal': 'Africa',
    'Serbia': 'Europe',
    'Seychelles': 'Africa',
    'Sierra Leone': 'Africa',
    'Singapore': 'Asia',
    'Slovakia': 'Europe',
    'Slovenia': 'Europe',
    'Somalia': 'Africa',
    'South Africa': 'Africa',
    'South Korea': 'Asia',
    'Spain': 'Europe',
    'Sri Lanka': 'Asia',
    'Sudan': 'Africa',
    'Swaziland': 'Africa',
    'Sweden': 'Europe' ,
    'Switzerland': 'Europe',
    'Syria': 'Asia',
    'Taiwan': 'Asia',
    'Tanzania': 'Africa',
    'Thailand': 'Asia',
    'Togo': 'Africa',
    'Trinidad and Tobago': 'North America',
    'Tunisia': 'Africa',
    'Turkey': 'Asia',
    'Turkmenistan': 'Asia',
    'Uganda': 'Africa',
    'Ukraine': 'Europe',
    'United Kingdom': 'Europe',
    'United States': 'North America',
    'Uruguay': 'South America',
    'Uzbekistan': 'Asia',
    'Venezuela': 'South America',
    'Vietnam': 'Asia',
    'Yemen': 'Asia',
    'Zimbabwe': 'Africa',
    'East Timor': 'Asia',
    'Guyana': 'South America',
    'Lesotho': 'Africa',
    'Liberia': 'Africa',
    'Myanmar': 'Asia',
    'Niger': 'Africa',
    'North Korea': 'Asia',
    'Puerto Rico': 'North America',
    'San Marino': 'Europe',
    'State of Palestine': 'Asia',
    'Suriname': 'South America',
    'São Tomé and Príncipe': 'Africa',
    'Tajikistan': 'Asia',
    'The Bahamas': 'North America',
    'United Arab Emirates': 'Asia',
    'Zambia': 'Africa',
    'Antigua and Barbuda': 'North America',
    'Botswana': 'Africa',
    'Chad': 'Africa',
    'Eritrea': 'Africa',
    'Laos': 'Asia',
    'Malawi': 'Africa',
    'Solomon Islands': 'Australia'
}

# Map each nationality to its corresponding region using the 'region_to_continent' dictionary
df['Region'] = df['Nationality'].map(nationality_to_continent)

# Group the data by 'Region', 'Year', and sum the 'Number' column
result = df.groupby(['Region', 'Year'])['Number'].sum().reset_index()

# Get a list of unique regions excluding 'Unknown'
regions = result[result['Region'] != 'Unknown']['Region'].unique()

# Create a line graph for each region with unique colors
plt.figure(figsize=(12, 6))  # Adjust the figure size as needed

# Define a list of unique colors
unique_colors = list(plt.cm.tab20(np.linspace(0, 1, len(regions))))

for i, region in enumerate(regions):
    region_data = result[result['Region'] == region]
    plt.plot(region_data['Year'], region_data['Number'], label=region, color=unique_colors[i], marker='o')

plt.xlabel('Year')
plt.ylabel('Population')
plt.title('Immigrant Population by Region Over Time')
plt.xticks(np.arange(min(result['Year']), max(result['Year'])+1, 1), rotation=45)


# Move the legend outside of the plot area and make it shorter
plt.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=1, title='Regions')

# Show the plot
plt.show()

"""##Immigrants by Net Amount"""

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('immigrants_emigrants_by_sex.csv')

# Group the data by 'Year' and 'District Name', and sum the 'Immigrants' and 'Emigrants' columns
result = df.groupby(['Year', 'District Name'])[['Immigrants']].sum().reset_index()

# Calculate the net immigrants by subtracting 'Emigrants' from 'Immigrants'
result['Net Immigrants'] = result['Immigrants'] - df['Emigrants']

# Print the resulting DataFrame
print(result)

import pandas as pd
import matplotlib.pyplot as plt

# Assuming you already have the DataFrame 'result' from your previous code

# Create a figure and axis for the single graph
fig, ax = plt.subplots(figsize=(12, 6))

# Get a list of unique district names
districts = result['District Name'].unique()

# Define a color palette for the lines
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'purple', 'orange', 'lime', 'pink', 'brown', 'gray', 'olive', 'teal']


# Loop through each district, assigning a color, and plot a line with data points (dots)
for i, district in enumerate(districts):
    # Filter the data for the current district
    district_data = result[result['District Name'] == district]

    # Extract the years and net immigrants counts
    years = district_data['Year']
    net_immigrants = district_data['Net Immigrants']

    # Plot the net immigrants for the current district with data points (dots)
    ax.plot(years, net_immigrants, marker='o', linestyle='-', label=f'{district} Net Immigrants', color=colors[i])

# Set labels and title for the graph
ax.set_xlabel('Year')
ax.set_ylabel('Net Immigrants Count')
ax.set_title('Net Immigrants Over Time by District')

# Add gridlines for better readability
ax.grid(False)

# Adjust the legend placement to not overlap with the lines
ax.legend(loc='upper left', bbox_to_anchor=(1, 1))

# Set x-axis ticks as whole integers
ax.xaxis.set_major_locator(plt.MaxNLocator(integer=True))

# Show the graph
plt.tight_layout()
plt.show()

"""##Population"""

import pandas as pd
import matplotlib.pyplot as plt

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('population.csv')

# Create a new column 'Age Group' to categorize the ages
def categorize_age(age):
    try:
        age_int = int(age.split('-')[0])
        if age_int <= 10:
            return '0-10'
        elif age_int <= 60:
            return '10-60'
        else:
            return '60-90'
    except ValueError:
        return age

df['Age Group'] = df['Age'].apply(categorize_age)

# Pivot the DataFrame to create columns for each age group (0-10, 10-60, 60-90)
df_pivot = df.pivot_table(index=['Year', 'District.Name'], columns='Age Group', values='Number', aggfunc='sum', fill_value=0)

# Reset the index to make 'Year' and 'District.Name' regular columns
df_pivot = df_pivot.reset_index()

# Rename the columns to make them more descriptive
df_pivot.columns.name = None

# Get a list of unique districts
districts = df_pivot['District.Name'].unique()

# Define a custom color palette
custom_colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'purple', 'orange', 'lime', 'pink', 'brown', 'gray', 'olive', 'teal']

# Create a total of three graphs
age_groups = ['0-10', '10-60', '60-90']
for i, age_group in enumerate(age_groups):
    fig, axs = plt.subplots(figsize=(12, 6))

    # Loop through each district and plot a line for the current age group
    for j, district in enumerate(districts):
        district_data = df_pivot[df_pivot['District.Name'] == district]

        # Extract the years and population data for the current age group
        years = district_data['Year']
        population_data = district_data[age_group]

        # Use a custom color from the palette
        color = custom_colors[j % len(custom_colors)]

        axs.plot(years, population_data, label=f'{district}', marker='o', color=color)

    axs.set_xlabel('Year')
    axs.set_ylabel('Population')
    axs.set_title(f'Population in Age Group {age_group}')

    # Set x-axis ticks as whole integers
    axs.xaxis.set_major_locator(plt.MaxNLocator(integer=True))

    axs.legend()

    plt.tight_layout()

# Show the three graphs
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
df = pd.read_csv("population.csv")

# Filter the data for the year 2017
population_2017 = df[df['Year'] == 2017]

# Group the data by 'District.Name' and 'Gender' and sum the 'Number' column
district_gender_population = population_2017.groupby(['District.Name', 'Gender'])['Number'].sum().unstack().reset_index()

# Create a segmented stack bar graph
plt.figure(figsize=(12, 8))
plt.bar(district_gender_population['District.Name'], district_gender_population['Male'], label='Male')
plt.bar(district_gender_population['District.Name'], district_gender_population['Female'], bottom=district_gender_population['Male'], label='Female')
plt.xlabel('District Name')
plt.ylabel('Population')
plt.title('Population per District in 2017 by Gender')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('population.csv')

# Create a new column 'Age Group' to categorize the ages
def categorize_age(age):
    try:
        age_int = int(age.split('-')[0])
        if age_int <= 10:
            return '0-10'
        elif age_int <= 60:
            return '10-60'
        else:
            return '60-90'
    except ValueError:
        return age

df['Age Group'] = df['Age'].apply(categorize_age)

# Pivot the DataFrame to create columns for each age group (0-10, 10-60, 60-90)
df_pivot = df.pivot_table(index=['Year', 'District.Name'], columns='Age Group', values='Number', aggfunc='sum', fill_value=0)

# Reset the index to make 'Year' and 'District.Name' regular columns
df_pivot = df_pivot.reset_index()

# Rename the columns to make them more descriptive
df_pivot.columns.name = None

# Get a list of unique districts
districts = df_pivot['District.Name'].unique()

# Define a custom color palette for each age group
custom_colors = {
    '0-10': 'b',
    '10-60': 'g',
    '60-90': 'r'
}

# Create a segmented stacked bar chart for each district
for district in districts:
    district_data = df_pivot[df_pivot['District.Name'] == district]

    # Extract the years and population data for the age groups
    years = district_data['Year']
    age_0_10 = district_data['0-10']
    age_10_60 = district_data['10-60']
    age_60_90 = district_data['60-90']

    # Set the width of the bars
    bar_width = 0.35

    # Set the positions for the bars
    positions = range(len(years))

    # Create the segmented stacked bar chart
    plt.figure(figsize=(12, 6))
    plt.bar(positions, age_0_10, width=bar_width, label='0-10', color=custom_colors['0-10'])
    plt.bar(positions, age_10_60, width=bar_width, label='10-60', color=custom_colors['10-60'], bottom=age_0_10)
    plt.bar(positions, age_60_90, width=bar_width, label='60-90', color=custom_colors['60-90'], bottom=age_0_10 + age_10_60)

    plt.xlabel('Year')
    plt.ylabel('Population')
    plt.title(f'Population Distribution by Age Group in {district}')
    plt.xticks(positions, years)
    plt.legend(title='Age Group', loc='upper right')

    plt.tight_layout()

    # Show the segmented stacked bar chart for the current district
    plt.show()

"""Avoid Errors for Above works fine!

##Unemployment
"""

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('unemployment.csv')

# Filter out rows with 'Gender' not equal to 'Male' and 'Demand_occupation' not equal to 'Registered unemployed'
df_filtered = df[(df['Gender'] == 'Male') & (df['Demand_occupation'] == 'Registered unemployed')]

# Group the filtered data by 'Year' and 'District Name' and sum the 'Number' column
result = df_filtered.groupby(['Year', 'District Name'])['Number'].sum().reset_index()

# Rename the 'Number' column to 'Unemployment'
result = result.rename(columns={'Number': 'Unemployment'})

# Print the resulting DataFrame
print(result)

import pandas as pd
import matplotlib.pyplot as plt

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('unemployment.csv')

# Filter the data for 'Demand_occupation' equal to 'Registered unemployed' and 'Number' not equal to 'no consta'
df_filtered = df[(df['Demand_occupation'] == 'Registered unemployed') & (df['Number'] != 'no consta')]

# Convert the 'Number' column to integers
df_filtered['Number'] = df_filtered['Number'].astype(int)

# Group the filtered data by 'Year', 'District Name', and 'Gender' and sum the 'Number' column
result = df_filtered.groupby(['Year', 'District Name', 'Gender'])['Number'].sum().reset_index()

# Pivot the data to have 'Year' as the index, 'District Name' as columns, and sum of 'Number' as values
pivoted_data = result.pivot_table(index='Year', columns='District Name', values='Number', aggfunc='sum')

# Create a line chart for each district, combining male and female data
plt.figure(figsize=(12, 6))  # Adjust the figure size as needed

# Generate a list of unique colors
unique_colors = plt.cm.tab20.colors  # You can choose any color map you prefer

# Loop through each district, assign a unique color, and plot a line with data points (dots)
for i, district in enumerate(pivoted_data.columns):
    color = unique_colors[i % len(unique_colors)]  # Use modulo to cycle through the unique colors
    plt.plot(pivoted_data.index, pivoted_data[district], label=district, marker='o', color=color)

plt.xlabel('Year')
plt.ylabel('Combined Unemployment Count')
plt.title('Combined Unemployment Count Over the Years by District (Male + Female)')
plt.xticks(pivoted_data.index, rotation=45)  # Set the x-axis labels as years

plt.legend()  # Add a legend to distinguish districts

# Show the plot
plt.tight_layout()
plt.show()

"""##Transport"""

import pandas as pd

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('transports.csv')

# Group the data by 'District Name' and 'Transport' and count the occurrences
transport_count = df.groupby('District.Name')['Transport'].count().reset_index()

# Print the resulting DataFrame
print(transport_count)

import pandas as pd
import matplotlib.pyplot as plt

custom_colors = ['b', 'g', 'r', 'c', 'y', 'k', 'purple', 'orange', 'lime', 'brown', 'gray', 'olive', 'teal']

# Load your CSV data into a Pandas DataFrame
# Replace 'your_file.csv' with the actual filename
df = pd.read_csv('transports.csv')

# Group the data by 'District Name' and 'Transport' and count the occurrences
transport_count = df.groupby(['District.Name', 'Transport']).size().unstack(fill_value=0)

# Plot the segmented bar graph with custom colors
transport_count.plot(kind='bar', stacked=True, figsize=(10, 6), color=custom_colors)
plt.title('Transport Type by District')
plt.xlabel('District Name')
plt.ylabel('Count')
plt.legend(title='Transport Type')

# Show the graph
plt.show()



"""##Births"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
df = pd.read_csv("births.csv")

# Filter out rows where 'District Name' is not 'No consta'
df = df[df['District Name'] != 'No consta']

# Group the data by 'Year' and 'District Name' and sum the 'Number' column
district_data = df.groupby(['Year', 'District Name'])['Number'].sum().unstack()

# Create a line graph with multiple lines (one for each district)
plt.figure(figsize=(12, 8))

for district in district_data.columns:
    plt.plot(district_data.index, district_data[district], label=district)

plt.xlabel('Year')
plt.ylabel('Total Number')
plt.title('Total Number of Births per Year (All Districts)')
plt.legend()
plt.grid(True)
plt.xticks(district_data.index.astype(int))  # Set x-axis ticks to integers
plt.tight_layout()

# Show the plot
plt.show()

"""##Accidents"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
df = pd.read_csv("accidents_2017.csv")

# Filter out rows where 'District Name' is not 'Unknown'
df = df[df['District Name'] != 'Unknown']

# Group the data by 'District Name' and count the number of accidents
district_data = df.groupby('District Name')['Id'].count().reset_index()

# Create a bar graph
plt.figure(figsize=(12, 8))
plt.bar(district_data['District Name'], district_data['Id'])
plt.xlabel('District Name')
plt.ylabel('Number of Accidents')
plt.title('Number of Accidents per District')
plt.xticks(rotation=45)
plt.tight_layout()

# Show the plot
plt.show()

"""##Deaths"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
df = pd.read_csv("deaths.csv")

# Filter out rows where 'District Name' is not 'No consta'
df = df[df['District.Name'] != 'No consta']

# Group the data by 'Year' and 'District Name' and sum the 'Number' column
district_data = df.groupby(['Year', 'District.Name'])['Number'].sum().unstack()

# Create a line graph with multiple lines (one for each district)
plt.figure(figsize=(12, 8))

for district in district_data.columns:
    plt.plot(district_data.index, district_data[district], label=district)

plt.xlabel('Year')
plt.ylabel('Total Number of Deaths')
plt.title('Total Number of Deaths per Year (All Districts)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.xticks(district_data.index.astype(int))  # Set x-axis ticks to integers


# Show the plot
plt.show()